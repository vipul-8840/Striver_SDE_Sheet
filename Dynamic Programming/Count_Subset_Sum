
// top-down approach or recursive way to solve the problem 
class Solution {
  public:
  
     int countSub(vector<int>& arr, int target, vector<vector<int>>& dp,int index )
     {
         
          if(index<0)
            return target == 0 ? 1 : 0;
          
          if(dp[index][target]!=-1)
          return dp[index][target];
          
          if(arr[index]<=target)
          {
             return  dp[index][target]=countSub(arr,target-arr[index],dp,index-1) + countSub(arr,target,dp,index-1);
          }
          
          else
          {
            return  dp[index][target] = countSub(arr,target,dp,index-1);
          }
     }
    int perfectSum(vector<int>& arr, int target)
    {
        // code here
        int n = arr.size();
        vector<vector<int>> dp(n+1,vector<int>(target+1,-1));
        
        return countSub(arr,target,dp,n-1);
    }
};


//  Bottom-up approach 

class Solution {
  public:
    int perfectSum(vector<int>& arr, int target) {
        // code here
         int n = arr.size();
        vector<vector<int>> dp(n+1,vector<int>(target+1,0));
        
        for(int i=0;i<=n;i++)
        dp[i][0]=1;
        
        for(int i=1;i<=n;i++)
        {
            for(int j=0;j<=target;j++)
            {
                if(arr[i-1]<=j)
                {
                    dp[i][j] = dp[i-1][j-arr[i-1]] + dp[i-1][j];
                }
                else
                {
                    dp[i][j]= dp[i-1][j];
                }
            }
        }
        
        return dp[n][target];
        
    }
};
